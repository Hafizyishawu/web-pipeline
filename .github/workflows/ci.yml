name: CI - tests, scans, build, sbom, dast, push

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-static-scans:
    name: Unit tests + SAST + Secrets + SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install deps
        working-directory: app
        run: npm ci

      - name: Unit tests
        working-directory: app
        run: npm test

      - name: Ensure reports dir at repo root
        run: mkdir -p reports

      - name: Semgrep Scan (with debugging)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true

      - name: Handle Semgrep SARIF output
        if: always()
        run: |
          echo "=== Looking for ANY SARIF files ==="
          # Semgrep doesn't create SARIF when there are 0 findings
          if [ -f "semgrep.sarif" ]; then
            echo "✓ Semgrep SARIF found (issues detected)"
            mv semgrep.sarif reports/
          else
            echo "✓ Semgrep found 0 issues - creating empty SARIF"
            # Create valid empty SARIF for consistency
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Semgrep"}},"results":[]}]}' > reports/semgrep.sarif
          fi

      - name: Check Semgrep output location
        if: always()
        run: |
          echo "=== Finding SARIF file==="
          find . -name "*.sarif" -type f 2>/dev/null || true
          echo "=== Current directory ==="
          ls -la
          echo "=== Reports directory ==="
          ls -la reports || true

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep.sarif

      - name: npm audit (high+)
        working-directory: app
        run: npm audit --audit-level=high

      - name: Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        with:
          args: detect --no-banner --redact --report-format sarif --report-path gitleaks.sarif

      - name: handle Gitleaks SARIF
        if: always()
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "✓ Gitleaks SARIF found (secrets detected)"
          else
            echo "✓ Gitleaks found 0 secrets - creating empty SARIF"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Gitleaks"}},"results":[]}]}' > gitleaks.sarif
          fi

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  build-image-and-scan:
    name: Build image + Trivy + SBOM
    runs-on: ubuntu-latest
    needs: [test-and-static-scans]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Trivy scan (image, HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy.sarif'
          exit-code: '1'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      - name: SBOM (CycloneDX via Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: cyclonedx-json
          output-file: sbom-cyclonedx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom-cyclonedx.json

  dast-zap:
    name: DAST - ZAP baseline against running container
    runs-on: ubuntu-latest
    needs: [build-image-and-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build (load for run)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: local/webdemo:test

      - name: Run container
        run: |
          docker run -d --name webdemo -p 3000:3000 local/webdemo:test
          echo "waiting for app to start..."

          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "app started"
              break
            fi
            echo "waiting... ($i/30)"
            sleep 2
          done


          curl -I http://localhost:3000 || true


      - name: ZAP Baseline (fail on alerts)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          fail_action: true
          allow_issue_writing: false
          cmd_options: '-j -l WARN'

      - name: Stop container
        if: always()
        run: docker rm -f webdemo || true

  push-image:
    name: Push to GHCR (only after ALL gates)
    runs-on: ubuntu-latest
    needs: [dast-zap]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
